# Copyright (c) 2021-2022 Intel Corporation.
# SPDX-License-Identifier: MIT
#
# Prerequisite:
# ./build-deb/xpumanager_xxxxx+ubuntu22.04_amd64.deb
# ./requirements.txt (copy from rest)
# ./third-party-programs.txt
#
# Build by:
# docker build -f Dockerfile.ubuntu.22.04.pvc -t intel-xpumanager:ubuntu22.04pvc .
#
# Run by (refer to deployment/docker/README.md for details):
# docker run --cap-drop ALL --cap-add CAP_SYS_ADMIN --user root -e XPUM_REST_NO_TLS=1 -e XPUM_EXPORTER_NO_AUTH=1 -e XPUM_EXPORTER_ONLY=1 --publish 127.0.0.1:29999:29999 --device /dev/dri:/dev/dri --name=xpum intel-xpumanager:ubuntu22.04pvc
FROM ubuntu:22.04 as builder
ENV HOME=/home/nobody
ENV no_proxy=localhost,127.0.0.1
ENV NO_PROXY=localhost,127.0.0.1

# don't ask anything
ARG DEBIAN_FRONTEND=noninteractive

RUN apt-get update  && \
apt-get install -y --no-install-recommends \ 
  python3 \
  python3-pip \
  python3-venv && \
rm -rf /var/lib/apt/lists/*

RUN python3 -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"
COPY requirements.txt /requirements.txt
RUN pip install -r /requirements.txt
RUN pip install gunicorn[gthread]
WORKDIR /opt/venv
RUN find . -name "pip*" -exec rm -rf {} \; ;exit 0
RUN find . -name "*normalizer*" -exec rm -rf {} \; ;exit 0
RUN find . -name "activate*" -exec rm -rf {} \; ;exit 0
RUN find . -name "Activate*" -exec rm -rf {} \; ;exit 0
RUN find . -name "python-wheels" -exec rm -rf {} \; ;exit 0
RUN find . -name "easy_install*" -exec rm -rf {} \; ;exit 0
RUN find . -name "setuptools*" -exec rm -rf {} \; ;exit 0
RUN find . -name "__pycache__" -exec rm -rf {} \; ;exit 0

FROM ubuntu:22.04

ENV HOME=/home/nobody
ENV no_proxy=localhost,127.0.0.1
ENV NO_PROXY=localhost,127.0.0.1

# don't ask anything
ARG DEBIAN_FRONTEND=noninteractive

# put tpp file in the container
COPY third-party-programs.txt .

WORKDIR /tmp/work

RUN apt-get update && \
  apt-get install -y --no-install-recommends \
    curl \
    ca-certificates \
    dmidecode \
    gnupg2 \
    python3 \
    libnl-genl-3-200 && \
  rm -rf /var/lib/apt/lists/*

ARG AGAMA_REPO=untested/main/agama/devel-pvc-prq/jammy
ARG AGAMA_BUILD=agama-ci-devel-pvc-prq-66

# Add AGAMA repo
RUN curl --noproxy '*' -fsSL \
    https://gfx-assets-build.intel.com/artifactory/api/gpg/key/public | gpg --dearmor --output /usr/share/keyrings/intel-graphics.gpg && \
    echo "deb [arch=amd64,i386 signed-by=/usr/share/keyrings/intel-graphics.gpg] https://gfx-assets-build.intel.com/artifactory/gfx-debs-per-build $AGAMA_REPO $AGAMA_BUILD" | \
    tee /etc/apt/sources.list.d/intel.gpu.jammy.list

RUN no_proxy=.intel.com apt-get update && \
  no_proxy=.intel.com apt install -y --no-install-recommends \
    intel-gsc \
    intel-level-zero-gpu \
    intel-metrics-discovery \
    intel-metrics-library \
    libmfx-tools \
    level-zero \
    libdrm2 && \
  rm -rf /var/lib/apt/lists/*

COPY --from=builder /opt/venv /opt/venv

COPY build-deb/*.deb .
RUN ldconfig && dpkg -i --force-all *.deb

WORKDIR /

ENV PATH="/opt/venv/bin:$PATH"

# set up entry point
RUN /bin/echo -e "#!/bin/sh\n\
export PYTHONUNBUFFERED=1\n\
socket_folder=\${XPUM_SOCKET_FOLDER:-/tmp}\n\
rest_host=\${XPUM_REST_HOST:-0.0.0.0}\n\
rest_port=\${XPUM_REST_PORT:-29999}\n\
rest_no_tls=\${XPUM_REST_NO_TLS:-0}\n\
/opt/xpum/bin/xpumd -s \${socket_folder} &\n\
until [ -e \${socket_folder}/xpum_p.sock ]; do sleep 0.1; done\n\
if [ \"\${rest_no_tls}\" != \"1\" ]\n\
then\n\
  rest_tls_param=\"--certfile conf/cert.pem --keyfile conf/key.pem\"\n\
fi\n\
(cd /opt/xpum/rest && exec gunicorn \${rest_tls_param} --bind \${rest_host}:\${rest_port} --worker-class gthread --threads 10 --worker-connections 1000 -w 1 'xpum_rest_main:main()')\n\
" >> /entry_point.sh && chmod +x /entry_point.sh

ENTRYPOINT ["/entry_point.sh"]
