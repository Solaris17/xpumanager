# Copyright (c) 2021-2022 Intel Corporation.
# SPDX-License-Identifier: MIT
#
# Build by:
# docker build --build-arg git_commit=`git rev-parse --short HEAD` -f Dockerfile.ubuntu -t intel-xpumanager .
#
# Run by (refer to deployment/docker/README.md for details):
# docker run --cap-drop ALL --cap-add CAP_SYS_ADMIN --user root -e XPUM_REST_NO_TLS=1 -e XPUM_EXPORTER_NO_AUTH=1 -e XPUM_EXPORTER_ONLY=1 --publish 127.0.0.1:29999:29999 --device /dev/dri:/dev/dri --name=xpum intel-xpumanager
FROM ubuntu:20.04 as builder

ENV HOME=/home/nobody
ENV no_proxy=localhost,127.0.0.1
ENV NO_PROXY=localhost,127.0.0.1

ARG git_commit=1234abcd

# don't ask anything
ARG DEBIAN_FRONTEND=noninteractive

RUN apt-get update  && \
apt-get install -y --no-install-recommends \ 
  autoconf \
  automake \
  build-essential \
  cmake \
  doxygen \
  dpkg-dev \
  gcc \
  gnupg2 \
  g++ \
  libtool \
  liblua5.2-0 \
  libdrm-dev \
  libgrpc++-dev \
  libgrpc++1 \
  pkg-config \
  python3 \
  python3-dev \
  python3-pip \
  python3-venv \
  protobuf-compiler \
  protobuf-compiler-grpc \
  wget && \
rm -rf /var/lib/apt/lists/*

RUN pip3 install grpcio-tools mistune==0.8.4 apispec apispec_webframeworks \
      Sphinx sphinx_rtd_theme sphinxcontrib-openapi \
      apispec-webframeworks myst-parser marshmallow \
      prometheus-client flask flask_httpauth

RUN wget -qc --no-check-certificate https://github.com/intel/metee/archive/refs/tags/3.1.3.tar.gz -O - | tar -xz && \
    cd /metee-3.1.3 && \
    mkdir build && \
    cd build && \
    cmake .. && \
    make -j4 && \
    make install
    
RUN wget -qc --no-check-certificate https://github.com/intel/igsc/archive/refs/tags/V0.8.0.tar.gz -O - | tar -xz && \
    cd /igsc-0.8.0 && \
    mkdir build && \
    cd build && \
    cmake -DENABLE_ENUM=OFF .. && \
    make -j4 && \
    make install DESTDIR=/stage

RUN apt-get remove -y libpciaccess-dev libpciaccess0 && \
  apt-get autoremove -y

RUN python3 -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"
COPY requirements.txt /requirements.txt
RUN pip install -r /requirements.txt
RUN pip install gunicorn[gthread]
WORKDIR /opt/venv
RUN find . -name "pip*" -exec rm -rf {} \; ;exit 0
RUN find . -name "*normalizer*" -exec rm -rf {} \; ;exit 0
RUN find . -name "activate*" -exec rm -rf {} \; ;exit 0
RUN find . -name "Activate*" -exec rm -rf {} \; ;exit 0
RUN find . -name "python-wheels" -exec rm -rf {} \; ;exit 0
RUN find . -name "easy_install*" -exec rm -rf {} \; ;exit 0
RUN find . -name "setuptools*" -exec rm -rf {} \; ;exit 0
RUN find . -name "__pycache__" -exec rm -rf {} \; ;exit 0

FROM ubuntu:20.04

ENV HOME=/home/nobody
ENV no_proxy=localhost,127.0.0.1
ENV NO_PROXY=localhost,127.0.0.1

# don't ask anything
ARG DEBIAN_FRONTEND=noninteractive

# put tpp file in the container
COPY third-party-programs.txt .

WORKDIR /tmp/work

RUN apt-get update && \
  apt-get install -y --no-install-recommends wget gnupg2 ca-certificates && \
  wget -qO - https://repositories.intel.com/graphics/intel-graphics.key | apt-key add - && \
  echo "deb [trusted=yes arch=amd64] https://repositories.intel.com/graphics/ubuntu focal main" > /etc/apt/sources.list.d/intel-graphics.list && \
  apt-get update && \
  apt-get install -y --no-install-recommends \
    dmidecode \
    python3 \
    libnl-genl-3-200 \
    libgrpc++1 \
    intel-level-zero-gpu \
    level-zero \
    libdrm2 \
    libmd1 \
    libigdml1 && \
  apt-get remove -y wget gnupg2 ca-certificates && \
  apt-get autoremove -y && \
  rm -rf /var/lib/apt/lists/*

COPY --from=builder /stage/* /usr
COPY --from=builder /opt/venv /opt/venv

COPY build-deb/*.deb .
RUN ldconfig && dpkg -i --force-all *.deb

WORKDIR /

ENV PATH="/opt/venv/bin:$PATH"

# set up entry point
RUN /bin/echo -e "#!/bin/sh\n\
export PYTHONUNBUFFERED=1\n\
socket_folder=\${XPUM_SOCKET_FOLDER:-/tmp}\n\
rest_host=\${XPUM_REST_HOST:-0.0.0.0}\n\
rest_port=\${XPUM_REST_PORT:-29999}\n\
rest_no_tls=\${XPUM_REST_NO_TLS:-0}\n\
/opt/xpum/bin/xpumd -s \${socket_folder} &\n\
until [ -e \${socket_folder}/xpum_p.sock ]; do sleep 0.1; done\n\
if [ \"\${rest_no_tls}\" != \"1\" ]\n\
then\n\
  rest_tls_param=\"--certfile conf/cert.pem --keyfile conf/key.pem\"\n\
fi\n\
(cd /opt/xpum/rest && exec gunicorn \${rest_tls_param} --bind \${rest_host}:\${rest_port} --worker-class gthread --threads 10 --worker-connections 1000 -w 1 'xpum_rest_main:main()')\n\
" >> /entry_point.sh && chmod +x /entry_point.sh

ENTRYPOINT ["/entry_point.sh"]
